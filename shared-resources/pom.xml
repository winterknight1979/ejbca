<?xml version="1.0" encoding="utf-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>goldeneyes.ejbca</groupId>
        <artifactId>ejbca</artifactId>
        <version>${revision}</version>
    </parent>
    <artifactId>shared-resources</artifactId>
    <name>EJBCA Shared resource bundle</name>
    <description>Shared resource bundle; configurator, and Service Manifest builder.</description>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>prepare-bundle</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/bundle</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${project.basedir}/src/main/resources</directory>
                                    <include>**/*</include>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-remote-resources-plugin</artifactId>
                <version>1.7.0</version>
                <executions>
                    <execution>
                        <id>create-resource-bundle</id>
                        <goals>
                            <goal>bundle</goal>
                        </goals>
                        <phase>compile</phase>
                        <configuration>
                            <resourcesDirectory>${project.build.directory}/bundle</resourcesDirectory>
                            <includes>
                                <include>**/*</include>
                            </includes>
                        </configuration>
                    </execution>
                    <execution>
                        <id>unpack-resource-bundle</id>
                        <configuration>
                            <skip>true</skip>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>properties-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>load-config-files</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>read-project-properties</goal>
                        </goals>
                        <configuration>
                            <quiet>true</quiet>
                            <files>
                                <file>${project.basedir}/src/main/resources/internal.properties</file>
                                <file>${project.basedir}/src/main/resources/conf/ejbca.properties</file>
                                <file>${project.basedir}/src/main/resources/conf/install.properties</file>
                                <file>${project.basedir}/src/main/resources/conf/protection.properties</file>
                                <file>${project.basedir}/src/main/resources/conf/database.properties</file>
                                <file>${project.basedir}/src/main/resources/conf/mail.properties</file>
                                <file>${project.basedir}/src/main/resources/conf/ocsp.properties</file>
                                <file>${project.basedir}/src/main/resources/conf/web.properties</file>
                                <file>${project.basedir}/src/main/resources/conf/cmptcp.properties</file>
                                <file>${project.basedir}/src/main/resources/conf/jaxws.properties</file>
                                <file>${project.basedir}/src/main/resources/conf/externalra.properties</file>
                                <file>${project.basedir}/src/main/resources/conf/scepra.properties</file>
                                <file>${project.basedir}/src/main/resources/conf/externalra-gui.properties</file>
                                <file>${project.basedir}/src/main/resources/conf/certstore.properties</file>
                                <file>${project.basedir}/src/main/resources/conf/crlstore.properties</file>
                                <file>${project.basedir}/src/main/resources/conf/va.properties</file>
                                <file>${project.basedir}/src/main/resources/conf/va-publisher.properties</file>
                                <file>${project.basedir}/src/main/resources/conf/systemtests.properties</file>
                            </files>
                        </configuration>
                    </execution>
<!-- To avoid polluting the source tree we build the bundle from a fresh directory rather than directly from src/main/resources 
                                             Unfortunately this means we need to write the build properties file twice, once to the bundle and once to the output dir.-->
                    <execution>
                        <id>Write build properties to bundle</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>write-project-properties</goal>
                        </goals>
                        <configuration>
                            <outputFile>${project.build.directory}/bundle/build.properties</outputFile>
                        </configuration>
                    </execution>
                    <execution>
                        <id>Write build properties to jar</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>write-project-properties</goal>
                        </goals>
                        <configuration>
                            <outputFile>${project.build.directory}/classes/build.properties</outputFile>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>1.8</version>
                <executions>
                    <execution>
                        <id>load-config</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <exportAntProperties>true</exportAntProperties>
                            <target name="configure">
<!-- Import build specific info, like version number -->
                                <property environment="env" />
                                <property name="hwtoken_classes" value="hwtoken" />
                                <property name="hwtoken.class.dir" location="${hwtoken_classes}" />
<!-- Load property files -->
                                <property file="${project.basedir}/src/main/resources/conf/plugins/*.properties" />
<!-- httpsserver.hostname must be set cause it's used in preprocess. 
                                                                        It will only be set here if not set in any property file -->
                                <property name="httpsserver.hostname" value="localhost" />
<!-- A little special something to handle backward compatibility 
                                                                        with people using JBOSS_HOME. They can switch to APPSRV_HOME now, and both 
                                                                        will work. -->
                                <condition property="jboss.home" value="${env.JBOSS_HOME}">
                                    <equals arg1="${appserver.home}" arg2="${appserver.home}" />
                                </condition>
                                <condition property="appserver.home" value="${env.APPSRV_HOME}" else="${jboss.home}">
                                    <contains string="${jboss.home}" substring="JBOSS_HOME" />
                                </condition>
<!-- Auto-detect supported application server type -->
                                <available file="${appserver.home}/modules/org/jboss/as/standalone/main/module.xml" property="appserver.type" value="jboss" />
                                <available file="${appserver.home}/modules/system/layers/base/org/jboss/as/standalone/main/module.xml" property="appserver.type" value="jboss" />
                                <available file="${appserver.home}/modules/org/jboss/as/standalone/main/module.xml" property="appserver.subtype" value="jboss7" />
<!-- WildFly 8, 9 and 10 is same as JBoss EAP 6 for building -->
                                <available file="${appserver.home}/modules/system/layers/base/org/jboss/as/standalone/main/module.xml" property="appserver.subtype"
                                value="jbosseap6" />
                                <available file="${appserver.home}/lib/javaee.jar" property="appserver.type" value="glassfish" />
                                <available file="${appserver.home}/glassfish/lib/javaee.jar" property="appserver.type" value="glassfish" />
                                <available file="${appserver.home}/modules/bean-validator.jar" property="appserver.subtype" value="glassfish3" />
                                <available file="${appserver.home}/glassfish/lib/appserv-rt.jar" property="appserver.subtype" value="glassfish4" />
                                <property name="appserver.type.detected.errormessage"
                                value="'appserver.type' could not be detected or is not configured. Glassfish 3.1, Glassfish 4.0, JBoss 7.1.1, JBoss EAP 6.1, 6.2, 6.3, 6.4, WildFly 8, 9, 10 can be detected. (Is 'appserver.home' configured?)" />
                                <ant antfile="${project.basedir}/src/main/resources/echo.xml" target="appserver.error.message" />
                                <condition property="bundle-hibernate-jpa">
                                    <or>
                                        <matches pattern="glassfish" string="${appserver.type}" />
<!-- ... -->
                                    </or>
                                </condition>
                                <condition property="exclude-slf4j">
                                    <or>
                                        <matches pattern="glassfish3" string="${appserver.subtype}" />
                                        <matches pattern="glassfish4" string="${appserver.subtype}" />
<!-- ... -->
                                    </or>
                                </condition>
                                <condition property="exclude-xerces">
                                    <or>
                                        <matches pattern="jboss7" string="${appserver.subtype}" />
                                        <matches pattern="jbosseap6" string="${appserver.subtype}" />
                                        <matches pattern="glassfish" string="${appserver.type}" />
<!-- ... -->
                                    </or>
                                </condition>
<!-- Automatically determine DataSource JNDI name prefix from application 
                                                                        server type -->
                                <condition property="datasource.jndi-name-prefix" value="java:/">
                                    <equals arg1="jboss" arg2="${appserver.type}" />
                                </condition>
                                <condition property="datasource.jndi-name-prefix" value="jdbc/">
                                    <equals arg1="glassfish" arg2="${appserver.type}" />
                                </condition>
<!-- Finally we read in default properties from file. This should 
                                                                        be done last since a few settings above are automagically detected based 
                                                                        on appserver-type for instance -->
                                <property file="${project.basedir}/src/main/resources/defaultvalues.properties" />
<!-- set some hard coded defaults, if they have not been set before -->
<!-- java.ver is used to select the correct version of bc libraries 
                                                                        to include in ear -->
                                <property name="java.ver" value="16" />
                                <property name="ca.tokentype" value="soft" />
                                <property name="ocspHardTokenClasses" value="${project.basedir}/src/main/resources/ocspHardTokenClasses" />
                                <property name="ocsp.hardToken.classes" location="${ocspHardTokenClasses}" />
                                <property name="mail.from" value="ejbca-donotreply@domain.com" />
                                <property name="mail.user" value="ejbca_user" />
                                <property name="mail.password" value="" />
                                <property name="mail.pop3.host" value="localhost" />
                                <property name="mail.smtp.host" value="localhost" />
                                <property name="mail.smtp.port" value="25" />
                                <property name="mail.smtp.auth" value="false" />
                                <property name="mail.smtp.starttls.enable" value="false" />
                                <property name="mail.debug" value="false" />
                                <property name="httpsserver.bindaddress.pubhttp" value="0.0.0.0" />
                                <property name="httpsserver.bindaddress.pubhttps" value="0.0.0.0" />
                                <property name="httpsserver.bindaddress.privhttps" value="0.0.0.0" />
                                <property name="httpserver.external.fqdn" value="" />
                                <property name="target.hostname" value="localhost" />
                                <property name="target.port.http" value="8080" />
                                <property name="tests.jvmargs" value="" />
<!-- By default, we connect directly to EJBCA in the CMP tests, but 
                                                                        it is also possible override those variables to connect via the CMP proxy -->
                                <property name="httpCmpProxyURL" value="http://${target.hostname}:${target.port.http}/ejbca/publicweb/cmp" />
                                <property name="tcpCmpProxyIP" value="${target.hostname}" />
                                <property name="tcpCmpProxyPort" value="5587" />
                                <condition property="doc.war.enabled">
                                    <equals arg1="internal" arg2="${web.docbaseuri}" casesensitive="false" trim="true" />
                                </condition>
                                <condition property="renew.war.enabled">
                                    <equals arg1="true" arg2="${web.renewalenabled}" casesensitive="false" trim="true" />
                                </condition>
                                <condition property="cmptcpservices.enabled">
                                    <istrue value="${cmp.tcp.enabled}" />
                                </condition>
                                <property name="ocsp.enabled" value="true" />
                                <property name="certstore.enabled" value="false" />
                                <property name="crlstore.enabled" value="false" />
                                <property name="crlstore.contextroot" value="/crls" />
                                <property name="certstore.contextroot" value="/certificates" />
                                <property name="ocsp.contextroot" value="/ejbca/publicweb/status" />
<!-- set hibernate dialect -->
                                <condition property="hibernate.dialect" value="org.hibernate.dialect.DB2Dialect">
                                    <equals arg1="${database.name}" arg2="db2" />
                                </condition>
                                <condition property="hibernate.dialect" value="org.hibernate.dialect.DerbyDialect">
                                    <equals arg1="${database.name}" arg2="derby" />
                                </condition>
                                <condition property="hibernate.dialect" value="org.hibernate.dialect.HSQLDialect">
                                    <equals arg1="${database.name}" arg2="hsqldb" />
                                </condition>
                                <condition property="hibernate.dialect" value="org.hibernate.dialect.H2Dialect">
                                    <equals arg1="${database.name}" arg2="h2" />
                                </condition>
                                <condition property="hibernate.dialect" value="org.hibernate.dialect.InformixDialect">
                                    <equals arg1="${database.name}" arg2="informix" />
                                </condition>
                                <condition property="hibernate.dialect" value="org.hibernate.dialect.IngresDialect">
                                    <equals arg1="${database.name}" arg2="ingres" />
                                </condition>
                                <condition property="hibernate.dialect" value="org.hibernate.dialect.SQLServer2008Dialect">
                                    <equals arg1="${database.name}" arg2="mssql" />
                                </condition>
                                <condition property="hibernate.dialect" value="org.hibernate.dialect.MySQLDialect">
                                    <equals arg1="${database.name}" arg2="mysql" />
                                </condition>
                                <condition property="hibernate.dialect" value="org.hibernate.dialect.Oracle10gDialect">
                                    <equals arg1="${database.name}" arg2="oracle" />
                                </condition>
                                <condition property="hibernate.dialect" value="org.hibernate.dialect.PostgreSQLDialect">
                                    <equals arg1="${database.name}" arg2="postgres" />
                                </condition>
                                <condition property="hibernate.dialect" value="org.hibernate.dialect.SybaseDialect">
                                    <equals arg1="${database.name}" arg2="sybase" />
                                </condition>
                                <fail unless="hibernate.dialect" message="Unsupported database type '${database.name}'." />
<!-- We use a valid connection sql to make JBoss auto-recreate destroyed 
                                                                        database connections. This SQL is different on DB2 and Oracle -->
                                <condition property="database.valid.connection.sql" value="select 1 from sysibm.sysdummy1">
                                    <equals arg1="${database.name}" arg2="db2" />
                                </condition>
                                <condition property="database.valid.connection.sql" value="select 1 from dual">
                                    <equals arg1="${database.name}" arg2="oracle" />
                                </condition>
                                <property name="database.valid.connection.sql" value="select 1" />
<!-- all other databases -->
                                <condition property="ocsp-database.valid.connection.sql" value="select 1 from sysibm.sysdummy1">
                                    <contains string="${ocsp-database.driver}" substring="db2" />
                                </condition>
                                <condition property="ocsp-database.valid.connection.sql" value="select 1 from dual">
                                    <contains string="${ocsp-database.driver}" substring="oracle" />
                                </condition>
                                <property name="ocsp-database.valid.connection.sql" value="select 1" />
<!-- all other databases -->
                                <condition property="externalra-database.valid.connection.sql" value="select 1 from sysibm.sysdummy1">
                                    <contains string="${externalra-database.driver}" substring="db2" />
                                </condition>
                                <condition property="externalra-database.valid.connection.sql" value="select 1 from dual">
                                    <contains string="${externalra-database.driver}" substring="oracle" />
                                </condition>
                                <property name="externalra-database.valid.connection.sql" value="select 1" />
<!-- all other databases -->
                                <property name="unidfnr.enabled" value="false" />
<!-- by default unidfnr is not enabled, but can be in ocsp.properties -->
                                <echo>---------- ${app.version} CONFIGURATION PROPERTIES ---------- appserver.type = ${appserver.type} appserver.subtype = ${appserver.subtype}
                                appserver.home = ${appserver.home} java.version(ant.java) = ${java.version} (${ant.java.version}) ocsp.signaturealgorithm =
                                ${ocsp.signaturealgorithm} datasource.jndi-name = ${datasource.jndi-name} datasource.jndi-name-prefix = ${datasource.jndi-name-prefix}
                                database.name = ${database.name} database.url = ${database.url} database.driver = ${database.driver} database.username = ${database.username}
                                database.password = *** database.useSeparateCertificateTable = ${database.useSeparateCertificateTable} database.valid.connection.sql =
                                ${database.valid.connection.sql} mail.jndi-name = ${mail.jndi-name} mail.from = ${mail.from} mail.user = ${mail.user} mail.password = ***
                                mail.smtp.host = ${mail.smtp.host} mail.smtp.port = ${mail.smtp.port} mail.smtp.auth = ${mail.smtp.auth} mail.debug = ${mail.debug}
                                httpserver.pubhttp = ${httpserver.pubhttp} httpserver.pubhttps = ${httpserver.pubhttps} httpserver.privhttps = ${httpserver.privhttps}
                                httpserver.external.privhttps = ${httpserver.external.privhttps} httpsserver.hostname = ${httpsserver.hostname} httpsserver.password = ***
                                httpserver.external.fqdn = ${httpserver.external.fqdn} web.contentencoding = ${web.contentencoding} web.renewalenabled = ${web.renewalenabled}
                                ejbcaws.enabled = ${ejbcaws.enabled} cmp.tcp.enabled = ${cmp.tcp.enabled} cmp.tcp.portno = ${cmp.tcp.portno} cmp.tcp.logdir = ${cmp.tcp.logdir}
                                cmp.tcp.conffile = ${cmp.tcp.conffile} unidfnr.enabled = ${unidfnr.enabled}</echo>
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-install-plugin</artifactId>
                <version>3.0.0-M1</version>
                <executions>
                    <execution>
                        <phase>initialize</phase>
                        <id>Install cert-cvc</id>
                        <goals>
                            <goal>install-file</goal>
                        </goals>
                        <configuration>
                            <file>ext/cert-cvc-1.4.9.jar</file>
                            <groupId>org.ejbca.cvc</groupId>
                            <artifactId>cert-cvc</artifactId>
                            <version>1.4.9</version>
                            <packaging>jar</packaging>
                            <generatePom>true</generatePom>
                        </configuration>
                    </execution>
                    <execution>
                        <phase>initialize</phase>
                        <id>Install Swagger UI</id>
                        <goals>
                            <goal>install-file</goal>
                        </goals>
                        <configuration>
                            <file>ext/swagger-ui.war</file>
                            <groupId>org.ejbca.swagger</groupId>
                            <artifactId>swagger-ui</artifactId>
                            <version>1.0.0</version>
                            <packaging>war</packaging>
                            <generatePom>true</generatePom>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <reporting>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>3.1.1</version>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>dependencies</report>
                            <report>dependency-info</report>
                            <report>summary</report>
                            <report>index</report>
                            <report>plugins</report>
                            <report>dependency-convergence</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-report-plugin</artifactId>
                <version>3.0.0-M4</version>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>report-only</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>
        </plugins>
    </reporting>
    <profiles>
        <profile>
            <id>only-eclipse</id>
            <activation>
                <property>
                    <name>m2e.version</name>
                </property>
            </activation>
            <build>
                <pluginManagement>
                    <plugins>
<!--This plugin's configuration is used to store Eclipse m2e settings 
                                                        only. It has no influence on the Maven build itself. -->
                        <plugin>
                            <groupId>org.eclipse.m2e</groupId>
                            <artifactId>lifecycle-mapping</artifactId>
                            <version>1.0.0</version>
                            <configuration>
                                <lifecycleMappingMetadata>
                                    <pluginExecutions>
                                        <pluginExecution>
                                            <pluginExecutionFilter>
                                                <groupId>org.apache.maven.plugins</groupId>
                                                <artifactId>maven-remote-resources-plugin</artifactId>
                                                <versionRange>[1.7.0,)</versionRange>
                                                <goals>
                                                    <goal>bundle</goal>
                                                </goals>
                                            </pluginExecutionFilter>
                                            <action>
                                                <ignore></ignore>
                                            </action>
                                        </pluginExecution>
                                        <pluginExecution>
                                            <pluginExecutionFilter>
                                                <groupId>org.apache.maven.plugins</groupId>
                                                <artifactId>maven-install-plugin</artifactId>
                                                <versionRange>[3.0.0-M1,)</versionRange>
                                                <goals>
                                                    <goal>install-file</goal>
                                                </goals>
                                            </pluginExecutionFilter>
                                            <action>
                                                <ignore></ignore>
                                            </action>
                                        </pluginExecution>
                                    </pluginExecutions>
                                </lifecycleMappingMetadata>
                            </configuration>
                        </plugin>
                    </plugins>
                </pluginManagement>
            </build>
        </profile>
    </profiles>
</project>
